// <auto-generated />
using Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(SheetsDbContext))]
    [Migration("20231001143611_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Contracts.Database.Cell", b =>
                {
                    b.Property<string>("SheetId")
                        .HasColumnType("text")
                        .HasColumnName("sheet_id");

                    b.Property<string>("CellId")
                        .HasColumnType("text")
                        .HasColumnName("cell_id");

                    b.Property<bool>("IsExpression")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expression");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("SheetId", "CellId");

                    b.ToTable("cells", "public");
                });

            modelBuilder.Entity("Contracts.Database.CellDependency", b =>
                {
                    b.Property<string>("DependedSheetId")
                        .HasColumnType("text")
                        .HasColumnName("depended_sheet_id");

                    b.Property<string>("DependedCellId")
                        .HasColumnType("text")
                        .HasColumnName("depended_cell_id");

                    b.Property<string>("DependedBySheetId")
                        .HasColumnType("text")
                        .HasColumnName("depended_by_sheet_id");

                    b.Property<string>("DependedByCellId")
                        .HasColumnType("text")
                        .HasColumnName("depended_by_cell_id");

                    b.HasKey("DependedSheetId", "DependedCellId", "DependedBySheetId", "DependedByCellId");

                    b.HasIndex("DependedBySheetId", "DependedByCellId");

                    b.ToTable("cell_dependencies", "public");
                });

            modelBuilder.Entity("Contracts.Database.CellDependency", b =>
                {
                    b.HasOne("Contracts.Database.Cell", "DependedByCell")
                        .WithMany("DependedCells")
                        .HasForeignKey("DependedBySheetId", "DependedByCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Contracts.Database.Cell", "DependedCell")
                        .WithMany("DependByCells")
                        .HasForeignKey("DependedSheetId", "DependedCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependedByCell");

                    b.Navigation("DependedCell");
                });

            modelBuilder.Entity("Contracts.Database.Cell", b =>
                {
                    b.Navigation("DependByCells");

                    b.Navigation("DependedCells");
                });
#pragma warning restore 612, 618
        }
    }
}
